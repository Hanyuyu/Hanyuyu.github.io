<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://stevenhy.com</id>
    <title>stevenhy&apos;s pocket</title>
    <updated>2019-08-12T12:17:40.734Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://stevenhy.com"/>
    <link rel="self" href="http://stevenhy.com/atom.xml"/>
    <subtitle>玻璃明亮, 橘子辉煌</subtitle>
    <logo>http://stevenhy.com/images/avatar.png</logo>
    <icon>http://stevenhy.com/favicon.ico</icon>
    <rights>All rights reserved 2019, stevenhy&apos;s pocket</rights>
    <entry>
        <title type="html"><![CDATA[数据结构回顾 - 栈的底层实现]]></title>
        <id>http://stevenhy.com/post/sjjghg-zddcsx</id>
        <link href="http://stevenhy.com/post/sjjghg-zddcsx">
        </link>
        <updated>2019-08-12T09:48:39.000Z</updated>
        <content type="html"><![CDATA[<p>🙎‍♂️💦之前在博客中, 从0实现了动态数组, 这个数组灵活性相当高, 在容量不够或者容量过大时都会进行<code>resize</code>操作, 且这个动态数组支持泛型, 任何对象都可以成为其元素。</p>
<p>这次，我们通过对栈的原理来实现一个栈！栈在学习过程中出现频率挺高， 举两个例子，第一个是撤销操作，就是我们在文本编辑器中常用到的撤销(Undo)操作，原理和栈是一个道理，还有一个是程序调用的系统栈，在对子过程进行调用的时候，会把主函数中子函数的入口地址存入栈中，待子过程调用完毕后，会从该系统栈中取出主函数中的位置，接着执行剩余的命令。</p>
<p>现在，我们来想一想该如何实现这个栈。🧐</p>
<h2 id="1需求分析">1.需求分析</h2>
<p>首先，我们把栈要实现的功能进行罗列：</p>
<pre><code class="language-java">	void push(E)    //进栈
	E pop()            //出栈
	E peek()          //查看栈顶元素
	int getSize()    //获取栈中元素个数
	boolean isEmpty()   //查看栈是否非空
</code></pre>
<p>以上就是我们在栈中要实现的功能，从用户角度来看，设计的栈支持这些操作就好，具体底层的实现，用户并不需要关心，底层实现由多种方式，为满足多态性要求，我们先设置一个<code>Stack</code>接口，定义出基本的操作， 然后我们可以利用以实现的动态数组，来构建自己的<code>ArrayStack</code>类，使其实现<code>Stack</code>接口，这样我们的栈也有了类似动态数组的自动调整容量的<code>resize()</code>方法。</p>
<h2 id="2具体实现">2.具体实现</h2>
<p><strong>Stack 接口定义如下</strong></p>
<pre><code class="language-java">public interface Stack&lt;E&gt; {
    int getSize();
    boolean isEmpty();
    void push(E e);
    E pop();
    E peek();
}
</code></pre>
<p><strong>ArrayStack 定义如下</strong></p>
<pre><code class="language-java">public class ArrayStack&lt;E&gt; implements Stack&lt;E&gt; {

	Array&lt;E&gt; array;
	
	//构造方法用于用户事先知道容量
	public ArrayStack(int capacity) {
		array = new Array&lt;&gt;(capacity);
	}
	//当用户不确定所需容量，提供无参构造函数
	public ArrayStack() {
		array = new Array&lt;&gt;();
	}
	
	
	@Override
	public int getSize() {
		// TODO Auto-generated method stub
		return array.getSize();
	}
	
		@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return array.isEmpty();
	}

	public int getCapacity() {
		return array.getCapiticy();
	}
	
	@Override
	public E pop() {
		// TODO Auto-generated method stub
		return array.removeLast();
	}

	@Override
	public E peek() {
		// TODO Auto-generated method stub
		return array.getLast(); // 为方便，在Array类中添加了getLast()方法 
	}
	
		@Override
	public void push(E e) {
		// TODO Auto-generated method stub
		array.addlast(e); //时间复杂度复习中, 因为与动态数组一样要考虑到resize操作, 故用均摊法分析复杂度为O(1)
	}
	
	@Override
	public String toString() {
		StringBuilder res = new StringBuilder();
		res.append(&quot;Stack: [&quot;);
		//res.append(array.toString());
		for(int i=0; i&lt;array.getSize(); i++) {
			res.append(array.get(i));
			if(i != array.getSize()-1)
				res.append(',');
		}
		res.append(&quot;] top&quot;);
		return res.toString();
	}
	
	
}
</code></pre>
<p>这样我们的栈就定义好了。</p>
<h2 id="3复杂度分析">3.复杂度分析</h2>
<p>接着我们需要分析它各项操作的时间复杂度来大致衡量性能<br>
<strong>ArrayStack</strong></p>
<table>
<thead>
<tr>
<th>method</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>push</td>
<td>O(1)  均摊</td>
</tr>
<tr>
<td>pop</td>
<td>O(1)  均摊</td>
</tr>
<tr>
<td>peek</td>
<td>O(1)</td>
</tr>
<tr>
<td>getSize</td>
<td>O(1)</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<h2 id="4验证结果">4.验证结果</h2>
<p>编写main方法进行验证，如下：</p>
<pre><code class="language-java">public class Main {
		public static void main(String[] args) {
		ArrayStack&lt;Integer&gt; stack = new ArrayStack&lt;&gt;();
		for(int i=0;i&lt;5;i++) {
			stack.push(i);
			System.out.println(stack);
		}
		stack.pop();
		System.out.println(stack);
		}
}
</code></pre>
<p><strong>结果如下</strong><br>
Stack: [0] top<br>
Stack: [0,1] top<br>
Stack: [0,1,2] top<br>
Stack: [0,1,2,3] top<br>
Stack: [0,1,2,3,4] top<br>
Stack: [0,1,2,3] top<br>
<br></p>
<blockquote>
<p>本文作者: 韩宇<br>
本文链接: <a href="http://stevenhy.com/post/sjjghg-zddcsx/">http://stevenhy.com/post/sjjghg-zddcsx/</a><br>
版权声明: 本博客所有文章除特别声明外, 均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议, 转载请注明出处</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构回顾 - 从0实现动态数组]]></title>
        <id>http://stevenhy.com/post/shu-ju-jie-gou-hui-gu-cong-0-shi-xian-dong-tai-shu-zu</id>
        <link href="http://stevenhy.com/post/shu-ju-jie-gou-hui-gu-cong-0-shi-xian-dong-tai-shu-zu">
        </link>
        <updated>2019-08-11T13:34:53.000Z</updated>
        <summary type="html"><![CDATA[<p>学完数据结构已经一年有余，有好多细节都已经要忘记了，所以开了这么一个系列，对数据结构的基础知识进行回顾<br>
该系列用java语言来进行实现，同时也借此机会巩固一下Java的基础语法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>学完数据结构已经一年有余，有好多细节都已经要忘记了，所以开了这么一个系列，对数据结构的基础知识进行回顾<br>
该系列用java语言来进行实现，同时也借此机会巩固一下Java的基础语法。</p>
<!-- more -->
<h2 id="1-在自主实现一个动态数组之前不妨先来复习java中的数组基础知识">1. 在自主实现一个动态数组之前，不妨先来复习Java中的数组基础知识。</h2>
<p><strong>声明数组变量</strong></p>
<p>在声明数组变量时，Java提供了两种方式:</p>
<pre><code class="language-java">dataType[] arrayname  // java所倡导的方式
dataType arrayname[]  //与上面的方法效果相同,但不建议使用
</code></pre>
<p><strong>创建数组</strong></p>
<pre><code class="language-java">arrayRefVar = new dataType[arraySize];
//上面的语法做了两件事
//1.创建了一个dataType类型的arraySize大小的数组
//2.把这个数组的引用赋值给变量arrayRefVar

//同样的,数组的创建与声明可以用一条语句完成
dataType[] arrayRefVar = new dataType[arraySize];
//也可以用大括号对元素进行初始化
dataType[] arrayRefVar = new dataType[]{1,2,3,4,5};
</code></pre>
<p><strong>遍历数组</strong></p>
<pre><code class="language-java">//第一种遍历方式,for循环
for(int i=0; i&lt;arrayRefVar.length; i++)
      System.out.println(arrayRefVar[i]);
      
//第二种遍历方式
for(dataType element:arrayRefVar)
      System.out.println(arrayRefVar[i]);

</code></pre>
<h2 id="2-借助已有的静态数组自己实现动态数组">2. 借助已有的静态数组自己实现动态数组</h2>
<pre><code class="language-java">//建立一个Array类,作为动态数组类,Array类有两个私有变量,其中data是一个静态数组,
//size种永远存放着数组中第一个空位置, 其大小表示了数组中变量的个数.
//该动态数组支持泛型, 任何对象都可以成为数组成员变量
public class Array&lt;E&gt; {
	private E[] data;
	private int size;
	
	//构造函数，传入数组的容量capacity构造函数
	public Array(int capaticy) {
		data = (E[])new Object[capaticy];
		size = 0;
	}
	
	//无参的构造函数，默认数组的容量capacity=10
	public Array() {
		this(10);
	}
	
	//获取数组中元素的个数
	public int getSize() {
		return size;
	}
	
	//获取数组的容量
	public int getCapiticy() {
		return data.length;
	}
	
	//返回数组是否为空
	public boolean isEmpty() {
		return size == 0;
	}
	
	//向数组末尾添加元素
	public void addlast(E e) {
		
		add(size,e);
	}
	
	//向数组头部添加元素
	public void addFirst(E e) {
		add(0, e);
	}
	
	//再index位置添加一个新元素e
	public void add(int index, E e) {
		
		
		if(!(index&gt;=0 &amp;&amp; index&lt;=size))
			throw new IllegalArgumentException(&quot;Add failed. Require index &gt;=0 and index &lt;=size&quot;);
		
		if(size == data.length)
			//throw new IllegalArgumentException(&quot;AddLast faild. Array is full.&quot;);
			resize(2 * data.length);
		
			
			for(int i = size-1; i&gt;=index; i--)
			data[i+1] = data[i];
		
		data[index] = e;
		size++;
	}
	
	//获取index位置的元素
	E get(int index) {
		if(!(index&gt;=0 &amp;&amp; index&lt;size))
			throw new IllegalArgumentException(&quot;Get failed. Require index &gt;=0 and index &lt;size&quot;);
		
		return data[index];
	}
	
	//修改index位置的元素
	void set(int index, E e) {
		if(!(index&gt;=0 &amp;&amp; index&lt;size))
			throw new IllegalArgumentException(&quot;Set failed. Require index &gt;=0 and index &lt;size&quot;);
		
		data[index] = e;
	}
	
	//查找数组中是否存在元素e
	public boolean contains(E e) {
		for(int i=0; i&lt;size; i++) {
			if(data[i].equals(e))
				return true;
		}
		return false;
	}
	
	//查找元素e在数组中第一次出现的位置,如果e不存在则返回-1
	public int find(E e) {
		for(int i=0; i&lt;size; i++) {
			if(data[i].equals(e))
				return i;
		}
		return -1;
	}
	
	//从数组中删除第一个元素
	public E removeFirst() {
		return remove(0);
	}
	
	//从数组中删除最后一个元素
	public E removeLast() {
		return remove(size-1);
	}
	
	//删除index位置的元素,返回删除元素
	public E remove(int index) {
		if(!(index&gt;=0 &amp;&amp; index&lt;size))
			throw new IllegalArgumentException(&quot;Remove failed. Require index &gt;=0 and index &lt;=size&quot;);
		E ret = data[index];
		for(int i=index; i&lt;size-1 ;i++) {
			data[i] = data[i+1];
		}
		size -=1;
		data[size]=null; // loitering object != memory leak
		
		if(size == data.length / 2)
			resize(data.length / 2);
		
		return ret;
	}
	
	//删除数组中的第一个e元素
	public void removeElement(E e) {
		int index = find(e);
		if(index != -1)
			remove(index);
	}
	
	//删除数组中的所有e元素
	public void removeAllElement(E e) {
		System.out.printf(&quot;size is %d&quot;, size);
		for(int i=0;i&lt;size;i++) {
			if(data[i].equals(e)) {
				remove(i);
				i-=1;
			}
				
		}
	}
	
	@Override
	public String toString() {
		StringBuilder res = new StringBuilder();
		res.append(String.format(&quot;Array: size = %d, capacity = %d\n&quot;,size, data.length));
		res.append('[');
		for(int i=0;i&lt;size;i++) {
			res.append(data[i]);
			if(i != size - 1)
				res.append(&quot;, &quot;);
		}
		res.append(']');
		return res.toString();
	}
	
	//动态变容，用均摊发分析，时间复杂度为O(1)!
	private void resize(int newcapacity) {
		E[] newdata = (E[])new Object[newcapacity];
		for(int i=0;i&lt;size;i++) 
			newdata[i] = data[i];
		data = newdata;
	}
	
	//同时看addLast和removeLast操作，在容量变换点重复操作两个方法，会一直有O(n),出现复杂度震荡
	//原因是由于removeLast操作过于(Eager)着急
	//解决：Lazy
	//当size为capacity的1/4时，缩容1/2；
}
</code></pre>
<p>至此动态数组已经基本搭建完成, 该动态数组的实现了自主扩容, 接下来我们对搭建好的动态数组进行性能分析..</p>
<h2 id="3时间复杂度分析">3.时间复杂度分析</h2>
<p>分析来看, 我们创建的动态数组完成了, 增 删 改 查 , 几类功能, 对于添加功能来看(add系列), 其中的<code>addLast</code>方法如果不考虑<code>resize</code>操作,时间复杂度为O(1), 但是<code>resize</code>操作的时间复杂度是O(n), 所以把<code>addLast</code>方法的时间复杂度记为O(n), 同理删除操作的时间复杂度也为O(n), 对于修改和查询操作,如果已知索引,时间复杂度均是O(1), 如果不知道索引, 那么时间复杂度就是O(n), 因此如果知道索引的话,数组结构的速度是非常快的.</p>
<h2 id="4优化">4.优化</h2>
<p>经过上面的分析, 我们对容量的<code>resize</code>操作好像性能很一般, 果真是这样吗?<br>
其实,我们在上面分析的时候漏掉了一个小细节, 就是<code>addLast</code>和<code>removeLast</code>两个方法不可能每次调用都会触发<code>resize</code>操作, 如果用O(n)来表示<code>resize</code>的时间复杂度, 显然是不合适的.</p>
<p>我们应该采取 <strong>均摊法</strong> 来分析, 如果容量是n, 那么<code>resize</code>会在第 n+1 次操作时触发, 即 n+1 次操作的执行次数是 n+n+1=2n+1 次, 2n+1/n+1 约等于2, 则时间复杂度是O(2)=O(1), 与n是没有关系的, 这样分析下来, <code>resize</code>操作的性能其实是较高的..</p>
<p>等等等等!</p>
<p>也许有细心的朋友已经发现了, 虽说照上面分析是O(1), 但是 我如果不停的触发<code>resize</code>操作的, 即我在一个容量边界不停执行<code>addLast</code> 和 <code>removeLast</code>操作, 那岂不是会一直触发<code>resize</code> 操作, 那么复杂度肯定不是O(1)了, 的确如此, 这样的情况应该考虑, 我们把这种情况称为发生了 <strong>复杂度震荡</strong> !</p>
<p>如何解决呢? 对于<code>addLast</code> 来说, 到了容量边界如果要继续增加元素, 那么扩容是必须的, 否则会抛出异常. 那么对于 <code>removeLast</code> 来说, 当实际需要容量是真实容量的1/2时, 把另一半的容量全部缩减是非必须的, 既然如此, 我们不妨把缩容量操作改为当实际元素个数是容量的1/4时, 在缩到1/2, Lazy 一点, 这样就不会产生 复杂度震荡的问题. 这样的将操作 <strong>Lazy</strong> 化的思路在算法中很常见, 灵活利用 <strong>Lazy</strong>策略, 有时会产生更好的性能!</p>
<pre><code class="language-java">	//删除index位置的元素,返回删除元素
	public E remove(int index) {
		if(!(index&gt;=0 &amp;&amp; index&lt;size))
			throw new IllegalArgumentException(&quot;Remove failed. Require index &gt;=0 and index &lt;=size&quot;);
		E ret = data[index];
		for(int i=index; i&lt;size-1 ;i++) {
			data[i] = data[i+1];
		}
		size -=1;
		data[size]=null; // loitering object != memory leak
            //改进后
		//防止最后缩容时出现size为0的情况，故加一个data.length/2!=0的条件
		if(size == data.length/4 &amp;&amp; data.length / 2 != 0)
			resize(data.length/2);
		
		return ret;
	}
</code></pre>
<br>
<br>
<blockquote>
<p>本文作者: 韩宇<br>
本文链接: <a href="http://stevenhy.com/post/shu-ju-jie-gou-hui-gu-cong-0-shi-xian-dong-tai-shu-zu/">http://stevenhy.com/post/shu-ju-jie-gou-hui-gu-cong-0-shi-xian-dong-tai-shu-zu/</a><br>
版权声明: 本博客所有文章除特别声明外, 均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议, 转载请注明出处</p>
</blockquote>
]]></content>
    </entry>
</feed>